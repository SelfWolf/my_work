## ETA模型梳理

1. 模型演进：从路径预测+时间预测累加和(路线驱动)->端到端预测(数据驱动)
   1. 路线驱动方式：先找到最优配送路径，然后对每段路径计算耗时进行累加
      1. 错误的累加
   2. 数据驱动方式：直接将相关特征输入，输出预计配送时间
      1. 需要大量标注数据
      2. 特征选择难度增大
2. 提出背景：一般的数据驱动，当做回归任务来做，存在的两点问题
   1. 存在的问题
      1. 配送顺序严重影响了配送时间
      2. 订单之间存在影响，ETA的预估需要考虑后来订单的影响
      3. 提出了DMAN(Multi-task Attention Network for food Delivery time prediction)
   2. 模型构思
      1. 通过自注意力捕获订单之间的互相影响
	  2. 利用模型模仿骑手决策过程：生成对订单的理解；考虑订单的互相影响；订单重要性评估；生成配送优先级
	  3. 将上述两个过程同时学习，利用多任务学习框架：配送时间估计+配送顺序
3. 实现细节
	1. 特征抽取：基于特征生成对订单和骑手的理解
		1. 空间特征：路线、路段、区域、距离、方向
		2. 时间特征：每天时段、周几、节假日，用于区分峰值和非峰值
		3. 餐厅信息：食品信息、单量、历史配送、等餐时间估计
		4. 骑手信息：配送能力、配送等级、熟悉度
		5. 上下文特征：天气信息、交通信息、区域未来订单量
	2. 通过self attention生成对订单相互影响的理解
		1. 骑手特征拼接订单特征，作为输入
		2. self attention + multi head attention
	3. 通过attention进行订单评估
		1. 骑手embedding和订单的互影响representation计算attention
		2. multi head方式计算上述attention，然后element wise 平均
		3. 基于平均的attention，对订单互影响representation进行加权
	4. 多任务学习：配送时间估计+配送顺序
		0. 上层参数共享
		1. 辅助任务-配送顺序：pointer network
		2. 主要任务-ETA估计：优先级表征+先验表征->全连接网络
	5. 损失函数
		1. ETA当做回归来做，使用MSE：预测时间和实际时间的差值
		2. 配送顺序当做分类来做：交叉熵损失，存在不定长问题？
		3. 两个任务一致性约束：交叉熵
4. 实验
	1. 对比实验方法
		1. Route-ETA：确定路线，然后分段+分路口时间累积计算ETA
		2. GBDT/FM/DeepFM：ETA看做是回归任务
		3. 模块实验
			1. self attention的有效性
4. 难点
	1. 不定长问题（10）：填充




















